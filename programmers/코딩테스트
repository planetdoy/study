## 문자열 뒤집기
> 시간 복잡도 분석  
> 각 쿼리마다 특정 부분을 뒤집는 작업 수행  
> StringBuilder 사용 시: O(M * N) (최악의 경우 substring() 및 replace() 연산이 반복될 수 있음)  
> char[] 사용 시: O(M) (각 구간을 swap하여 변경)  
> 총 M개의 쿼리를 처리하므로 최악의 경우에도 O(M * N) 이하의 성능  
> char[] 방식이 더 효율적이므로, 가능하면 배열을 사용하는 것이 좋습니다! 🚀  

## List<Integer> -> int[] 로 변환
> stream을 사용한다.  
```java
List<Integer> exampleList = new ArrayList<Integer>();
int[] result = exampleList.stream().mapToInt(Integer::intValue).toArray();
```

## List<String> <-> String[]
```plaintext
String[] → List<String> 	Arrays.asList(array)	                불변 리스트 (수정 불가)
                            List.of(array) (Java 9+)	            불변 리스트 (수정 불가)
                            new ArrayList<>(Arrays.asList(array))	수정 가능 리스트
                            
List<String> → String[]	    list.toArray(new String[0])	            최적 크기 배열 반환 (권장)
                            list.toArray(new String[list.size()])	특정 크기의 배열 생성
```

## 사전순 정렬
```plaintext
기본 사전순 정렬	                Collections.sort(list) 또는 Arrays.sort(arr)
내림차순 정렬	                list.sort(Comparator.reverseOrder())
대소문자 무시하고 정렬	        list.sort(String.CASE_INSENSITIVE_ORDER)
길이순 정렬	                    list.sort(Comparator.comparingInt(String::length))
```

## SQL - SELECT
```sql
-- date 타입에서 월을 구하려면 month() 를 사용하면 됩니다.
-- EX 
select month(date_of_birth) 
from member;

-- or 
select date_format('%m', date_of_birth) 
from member;

-- '%Y' -> 1994
-- '%y' -> 94 
-- '%M' -> december
-- '%m' -> 12
```